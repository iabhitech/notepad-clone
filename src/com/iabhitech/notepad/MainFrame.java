package com.iabhitech.notepad;

import java.awt.print.PrinterException;
import java.io.*;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author Abhineet Verma
 */
public class MainFrame extends javax.swing.JFrame {

    private File file;
    private BufferedReader br;
    private FileWriter fw;

    private int fontSize = 16;
    private String fontName = "Consolas";
    private int fontStyle = 0;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();

        updateWindowTitle(false);

        editor.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                updateWindowTitle(false);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                updateWindowTitle(false);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                updateWindowTitle(false);
            }

        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        dialogAbout = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jSeparator2 = new javax.swing.JSeparator();
        panelBody = new javax.swing.JPanel();
        scrollPaneEditor = new javax.swing.JScrollPane();
        editor = new javax.swing.JEditorPane();
        menuBar = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        fileMenuItemNew = new javax.swing.JMenuItem();
        fileMenuItemNewWindow = new javax.swing.JMenuItem();
        fileMenuItemOpen = new javax.swing.JMenuItem();
        fileMenuItemSave = new javax.swing.JMenuItem();
        fileMenuItemSaveAs = new javax.swing.JMenuItem();
        fileSeparator1 = new javax.swing.JPopupMenu.Separator();
        fileMenuItemPrint = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        fileMenuItemExit = new javax.swing.JMenuItem();
        menuEdit = new javax.swing.JMenu();
        editMenuItemCut = new javax.swing.JMenuItem();
        editMenuItemCopy = new javax.swing.JMenuItem();
        editMenuItemPaste = new javax.swing.JMenuItem();
        editMenuItemDelete = new javax.swing.JMenuItem();
        editSeparator2 = new javax.swing.JPopupMenu.Separator();
        menuItemSelectAll = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menuItemTimeDate = new javax.swing.JMenuItem();
        menuFormat = new javax.swing.JMenu();
        menuView = new javax.swing.JMenu();
        viewZoomMenu = new javax.swing.JMenu();
        viewMenuItemZoomIn = new javax.swing.JMenuItem();
        viewMenuItemZoomOut = new javax.swing.JMenuItem();
        viewMenuItemZoom0 = new javax.swing.JMenuItem();
        menuHelp = new javax.swing.JMenu();
        jMenuItem11 = new javax.swing.JMenuItem();

        fileChooser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        fileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileChooserActionPerformed(evt);
            }
        });

        dialogAbout.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        dialogAbout.setTitle("About Notepad Clone");
        dialogAbout.setAlwaysOnTop(true);
        dialogAbout.setBounds(new java.awt.Rectangle(0, 0, 580, 420));
        dialogAbout.setMinimumSize(new java.awt.Dimension(583, 420));
        dialogAbout.setModal(true);
        dialogAbout.setResizable(false);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setText("Notepad Clone");

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(204, 204, 204));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Calibri Light", 0, 16)); // NOI18N
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("Designed By: Abhineet Verma\nVersion: Beta\n\nThis Notepad Clone is only design for learning purpose.\nTechnology Stack: Java Swing\n\nSource Code: https://github.com/iabhitech\n");
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setBorder(null);
        jTextArea1.setOpaque(false);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(165, 165, 165)
                            .addComponent(jLabel1))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(60, 60, 60)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(68, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout dialogAboutLayout = new javax.swing.GroupLayout(dialogAbout.getContentPane());
        dialogAbout.getContentPane().setLayout(dialogAboutLayout);
        dialogAboutLayout.setHorizontalGroup(
            dialogAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogAboutLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        dialogAboutLayout.setVerticalGroup(
            dialogAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Notepad");
        setBackground(new java.awt.Color(255, 255, 255));

        panelBody.setBackground(new java.awt.Color(255, 255, 255));

        scrollPaneEditor.setBackground(new java.awt.Color(255, 255, 255));
        scrollPaneEditor.setBorder(null);

        editor.setBorder(null);
        editor.setFont(new java.awt.Font(fontName, 0, fontSize));
        editor.setMargin(new java.awt.Insets(10, 10, 10, 10));
        editor.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                editorCaretUpdate(evt);
            }
        });
        scrollPaneEditor.setViewportView(editor);

        javax.swing.GroupLayout panelBodyLayout = new javax.swing.GroupLayout(panelBody);
        panelBody.setLayout(panelBodyLayout);
        panelBodyLayout.setHorizontalGroup(
            panelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPaneEditor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1071, Short.MAX_VALUE)
        );
        panelBodyLayout.setVerticalGroup(
            panelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPaneEditor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 712, Short.MAX_VALUE)
        );

        menuBar.setBackground(new java.awt.Color(255, 255, 255));
        menuBar.setBorder(null);
        menuBar.setOpaque(false);

        menuFile.setBackground(new java.awt.Color(255, 255, 255));
        menuFile.setText("File");

        fileMenuItemNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        fileMenuItemNew.setText("New");
        fileMenuItemNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuItemNewActionPerformed(evt);
            }
        });
        menuFile.add(fileMenuItemNew);

        fileMenuItemNewWindow.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        fileMenuItemNewWindow.setText("New Window");
        fileMenuItemNewWindow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuItemNewWindowActionPerformed(evt);
            }
        });
        menuFile.add(fileMenuItemNewWindow);

        fileMenuItemOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        fileMenuItemOpen.setText("Open...");
        fileMenuItemOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuItemOpenActionPerformed(evt);
            }
        });
        menuFile.add(fileMenuItemOpen);

        fileMenuItemSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        fileMenuItemSave.setText("Save");
        fileMenuItemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSaveActionPerformed(evt);
            }
        });
        menuFile.add(fileMenuItemSave);

        fileMenuItemSaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        fileMenuItemSaveAs.setText("Save As...");
        fileMenuItemSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSaveAsActionPerformed(evt);
            }
        });
        menuFile.add(fileMenuItemSaveAs);
        menuFile.add(fileSeparator1);

        fileMenuItemPrint.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        fileMenuItemPrint.setText("Print...");
        fileMenuItemPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuItemPrintActionPerformed(evt);
            }
        });
        menuFile.add(fileMenuItemPrint);
        menuFile.add(jSeparator3);

        fileMenuItemExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        fileMenuItemExit.setText("Exit");
        fileMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuItemExitActionPerformed(evt);
            }
        });
        menuFile.add(fileMenuItemExit);

        menuBar.add(menuFile);

        menuEdit.setBackground(new java.awt.Color(255, 255, 255));
        menuEdit.setText("Edit");

        editMenuItemCut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        editMenuItemCut.setText("Cut");
        editMenuItemCut.setEnabled(false);
        editMenuItemCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editMenuItemCutActionPerformed(evt);
            }
        });
        menuEdit.add(editMenuItemCut);

        editMenuItemCopy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        editMenuItemCopy.setText("Copy");
        editMenuItemCopy.setEnabled(false);
        menuEdit.add(editMenuItemCopy);

        editMenuItemPaste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        editMenuItemPaste.setText("Paste");
        editMenuItemPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editMenuItemPasteActionPerformed(evt);
            }
        });
        menuEdit.add(editMenuItemPaste);

        editMenuItemDelete.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        editMenuItemDelete.setText("Delete");
        editMenuItemDelete.setEnabled(false);
        editMenuItemDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editMenuItemDeleteActionPerformed(evt);
            }
        });
        menuEdit.add(editMenuItemDelete);
        menuEdit.add(editSeparator2);

        menuItemSelectAll.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        menuItemSelectAll.setText("Select All");
        menuItemSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSelectAllActionPerformed(evt);
            }
        });
        menuEdit.add(menuItemSelectAll);
        menuEdit.add(jSeparator1);

        menuItemTimeDate.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        menuItemTimeDate.setText("Time/Date");
        menuItemTimeDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemTimeDateActionPerformed(evt);
            }
        });
        menuEdit.add(menuItemTimeDate);

        menuBar.add(menuEdit);

        menuFormat.setBackground(new java.awt.Color(255, 255, 255));
        menuFormat.setText("Format");
        menuBar.add(menuFormat);

        menuView.setBackground(new java.awt.Color(255, 255, 255));
        menuView.setText("View");

        viewZoomMenu.setText("Zoom");

        viewMenuItemZoomIn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_EQUALS, java.awt.event.InputEvent.CTRL_MASK));
        viewMenuItemZoomIn.setText("Zoom In");
        viewMenuItemZoomIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewMenuItemZoomInActionPerformed(evt);
            }
        });
        viewZoomMenu.add(viewMenuItemZoomIn);

        viewMenuItemZoomOut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_MINUS, java.awt.event.InputEvent.CTRL_MASK));
        viewMenuItemZoomOut.setText("Zoom Out");
        viewMenuItemZoomOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewMenuItemZoomOutActionPerformed(evt);
            }
        });
        viewZoomMenu.add(viewMenuItemZoomOut);

        viewMenuItemZoom0.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_0, java.awt.event.InputEvent.CTRL_MASK));
        viewMenuItemZoom0.setText("Restore Default Zoom");
        viewMenuItemZoom0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewMenuItemZoom0ActionPerformed(evt);
            }
        });
        viewZoomMenu.add(viewMenuItemZoom0);

        menuView.add(viewZoomMenu);

        menuBar.add(menuView);

        menuHelp.setBackground(new java.awt.Color(255, 255, 255));
        menuHelp.setText("Help");

        jMenuItem11.setText("About Notepad");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        menuHelp.add(jMenuItem11);

        menuBar.add(menuHelp);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBody, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBody, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSaveActionPerformed
        // File Save to Disk Action
        if (file != null) {
            //saving the file in background
            saveFile();
        } else {
            menuSaveAsActionPerformed(evt);
        }
    }//GEN-LAST:event_menuSaveActionPerformed

    private void menuSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSaveAsActionPerformed
        // Open Save As Dialog
        fileChooser.showSaveDialog(this);
    }//GEN-LAST:event_menuSaveAsActionPerformed

    private void fileMenuItemOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuItemOpenActionPerformed
        // TODO add your handling code here:
        fileChooser.showOpenDialog(this);
    }//GEN-LAST:event_fileMenuItemOpenActionPerformed

    private void fileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileChooserActionPerformed
        // TODO add your handling code here:
        if (evt.getActionCommand().equals("ApproveSelection")) {
            File f = fileChooser.getSelectedFile();
            switch (fileChooser.getDialogType()) {
                case JFileChooser.OPEN_DIALOG:
                    file = fileChooser.getSelectedFile();
                    editor.setText(getFileContent());
                    updateWindowTitle(true);
                    break;
                case JFileChooser.SAVE_DIALOG:
                    saveFile();
                    break;
            }

        }
    }//GEN-LAST:event_fileChooserActionPerformed

    private void fileMenuItemNewWindowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuItemNewWindowActionPerformed
        // TODO add your handling code here:
        MainFrame.main(null);
    }//GEN-LAST:event_fileMenuItemNewWindowActionPerformed

    private void fileMenuItemNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuItemNewActionPerformed
        // New File
        file = null;
        editor.setText("");
        updateWindowTitle(true);
    }//GEN-LAST:event_fileMenuItemNewActionPerformed

    private void fileMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuItemExitActionPerformed
        // EXIT
        System.exit(0);
    }//GEN-LAST:event_fileMenuItemExitActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        // About Notepad dialog
        dialogAbout.setLocationRelativeTo(this);
        dialogAbout.setVisible(true);
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void viewMenuItemZoomInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewMenuItemZoomInActionPerformed
        // ZOOM PLUS ACTION
        fontSize = Math.min(84, fontSize + 2);
        editor.setFont(new java.awt.Font(fontName, java.awt.Font.PLAIN, fontSize));
    }//GEN-LAST:event_viewMenuItemZoomInActionPerformed

    private void viewMenuItemZoomOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewMenuItemZoomOutActionPerformed
        // ZOOM MINUS ACTION
        fontSize = Math.max(8, fontSize - 2);
        editor.setFont(new java.awt.Font(fontName, java.awt.Font.PLAIN, fontSize));
    }//GEN-LAST:event_viewMenuItemZoomOutActionPerformed

    private void viewMenuItemZoom0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewMenuItemZoom0ActionPerformed
        // ZOOM DEFAULT ACTION
        fontSize = 16;
        editor.setFont(new java.awt.Font(fontName, java.awt.Font.PLAIN, fontSize));
    }//GEN-LAST:event_viewMenuItemZoom0ActionPerformed

    private void menuItemSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSelectAllActionPerformed
        // Select All Action
        editor.selectAll();
    }//GEN-LAST:event_menuItemSelectAllActionPerformed

    private void menuItemTimeDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemTimeDateActionPerformed
        // TODO add your handling code here:
        editor.replaceSelection(new Date().toString());
    }//GEN-LAST:event_menuItemTimeDateActionPerformed

    private void editMenuItemCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editMenuItemCutActionPerformed
        // TODO CUT ACTION:
        editor.cut();
    }//GEN-LAST:event_editMenuItemCutActionPerformed

    private void editorCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_editorCaretUpdate
        // TODO add your handling code here:
        //check for selected text
        if (editor.getSelectedText() != null) {
            //enable edit menu items
            editMenuItemCut.setEnabled(true);
            editMenuItemCopy.setEnabled(true);
        } else {
            //disable edit menu items
            editMenuItemCut.setEnabled(false);
            editMenuItemCopy.setEnabled(false);
        }

    }//GEN-LAST:event_editorCaretUpdate

    private void editMenuItemPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editMenuItemPasteActionPerformed
        // Paste event:
        editor.paste();
    }//GEN-LAST:event_editMenuItemPasteActionPerformed

    private void editMenuItemDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editMenuItemDeleteActionPerformed

    }//GEN-LAST:event_editMenuItemDeleteActionPerformed

    private void fileMenuItemPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuItemPrintActionPerformed
        // Print Page Event:
        try {
            editor.print();
        } catch (PrinterException ex) {
            JOptionPane.showMessageDialog(null, "Error in Printing this File", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_fileMenuItemPrintActionPerformed

    private void updateWindowTitle(boolean isFileSaved) {
        String fileName = file == null ? "Untitled" : file.getName();

        String title = (isFileSaved) ? fileName + " - Notepad" : "*" + fileName + " - Notepad";
        super.setTitle(title);
    }

    private void saveFile() {
        file = this.fileChooser.getSelectedFile();
        try {
            fw = new FileWriter(file);
            fw.write(editor.getText());
            fw.close();
            updateWindowTitle(true);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public String getFileContent() {
        String str = "";
        try {
            br = new BufferedReader(new FileReader(file));

            try {
                while (br.ready()) {
                    str += br.readLine() + "\n";
                }
                br.close();
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return str;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog dialogAbout;
    private javax.swing.JMenuItem editMenuItemCopy;
    private javax.swing.JMenuItem editMenuItemCut;
    private javax.swing.JMenuItem editMenuItemDelete;
    private javax.swing.JMenuItem editMenuItemPaste;
    private javax.swing.JPopupMenu.Separator editSeparator2;
    private javax.swing.JEditorPane editor;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenuItem fileMenuItemExit;
    private javax.swing.JMenuItem fileMenuItemNew;
    private javax.swing.JMenuItem fileMenuItemNewWindow;
    private javax.swing.JMenuItem fileMenuItemOpen;
    private javax.swing.JMenuItem fileMenuItemPrint;
    private javax.swing.JMenuItem fileMenuItemSave;
    private javax.swing.JMenuItem fileMenuItemSaveAs;
    private javax.swing.JPopupMenu.Separator fileSeparator1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuFormat;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JMenuItem menuItemSelectAll;
    private javax.swing.JMenuItem menuItemTimeDate;
    private javax.swing.JMenu menuView;
    private javax.swing.JPanel panelBody;
    private javax.swing.JScrollPane scrollPaneEditor;
    private javax.swing.JMenuItem viewMenuItemZoom0;
    private javax.swing.JMenuItem viewMenuItemZoomIn;
    private javax.swing.JMenuItem viewMenuItemZoomOut;
    private javax.swing.JMenu viewZoomMenu;
    // End of variables declaration//GEN-END:variables
}
